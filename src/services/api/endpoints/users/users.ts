/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Neurync - Documenta√ß√£o da API
 * A API consiste na manipula√ß√£o de registros do banco de dados de diferentes formas, al√©m de m√©todos de login.
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  CreateUser201,
  CreateUserBody,
  EditUserAboutBody,
  EditUserBody,
  EditUserNeurodivergenceBody,
  GetUserById200,
  LoginUser200,
  LoginUserBody
} from '../../schemas';




  export const getUsers = () => {
/**
 * Retorna as informa√ß√µes de um usu√°rio, com determinado ID, como resposta
 * @summary Retorna as informa√ß√µes de um usu√°rio
 */
const getUserById = <TData = AxiosResponse<GetUserById200>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://192.168.2.101:3333/users/${id}`,options
    );
  }
/**
 * Edita os dados de um usu√°rio com seu ID como par√¢metro.
 * @summary Edita os dados de um usu√°rio
 */
const editUser = <TData = AxiosResponse<unknown>>(
    id: string,
    editUserBody: EditUserBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `http://192.168.2.101:3333/users/${id}`,
      editUserBody,options
    );
  }
/**
 * Deleta os dados de um usu√°rio com seu ID como par√¢metro.
 * @summary Deleta os dados de um usu√°rio
 */
const deleteUser = <TData = AxiosResponse<unknown>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `http://192.168.2.101:3333/users/${id}`,options
    );
  }
/**
 * Cria um usu√°rio no banco de dados, pegando nome, email e senha, encriptando esta √∫ltima.
 * @summary Cria um usu√°rio no BD
 */
const createUser = <TData = AxiosResponse<CreateUser201>>(
    createUserBody: CreateUserBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://192.168.2.101:3333/users/register`,
      createUserBody,options
    );
  }
/**
 * Realiza um login com base em email e senha do usu√°rio, retornando um JWT Token.
 * @summary Faz login do usu√°rio
 */
const loginUser = <TData = AxiosResponse<LoginUser200>>(
    loginUserBody: LoginUserBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://192.168.2.101:3333/users/login`,
      loginUserBody,options
    );
  }
/**
 * Edita o 'about' (sobre) de um usu√°rio.
 * @summary Edita o 'about' de um usu√°rio.
 */
const editUserAbout = <TData = AxiosResponse<unknown>>(
    editUserAboutBody: EditUserAboutBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `http://192.168.2.101:3333/users/about`,
      editUserAboutBody,options
    );
  }
/**
 * Edita o 'neurodivergence' (neurodivergencia) de um usu√°rio.
 * @summary Edita o 'neurodivergence' de um usu√°rio.
 */
const editUserNeurodivergence = <TData = AxiosResponse<unknown>>(
    editUserNeurodivergenceBody: EditUserNeurodivergenceBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `http://192.168.2.101:3333/users/neurodivergence`,
      editUserNeurodivergenceBody,options
    );
  }
return {getUserById,editUser,deleteUser,createUser,loginUser,editUserAbout,editUserNeurodivergence}};
export type GetUserByIdResult = AxiosResponse<GetUserById200>
export type EditUserResult = AxiosResponse<unknown>
export type DeleteUserResult = AxiosResponse<unknown>
export type CreateUserResult = AxiosResponse<CreateUser201>
export type LoginUserResult = AxiosResponse<LoginUser200>
export type EditUserAboutResult = AxiosResponse<unknown>
export type EditUserNeurodivergenceResult = AxiosResponse<unknown>
